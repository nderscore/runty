(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{66:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return p})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return c}));var n=a(2),i=a(6),r=(a(0),a(82)),p={title:"Template Syntax"},o={unversionedId:"syntax",id:"syntax",isDocsHomePage:!1,title:"Template Syntax",description:"Syntax",source:"@site/docs/syntax.md",slug:"/syntax",permalink:"/docs/syntax",editUrl:"https://github.com/nderscore/runty/edit/master/website/docs/syntax.md",version:"current",sidebar:"sidebar",previous:{title:"Get Started",permalink:"/docs/"},next:{title:"API Reference",permalink:"/docs/api"}},s=[{value:"Syntax",id:"syntax",children:[]}],b={rightToc:s};function c(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"syntax"},"Syntax"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Templates")," are a string containing a sequence of plain strings and expressions.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Expressions")," are wrapped by a pair of ",Object(r.b)("inlineCode",{parentName:"p"},"{}"),"'s and come in two types:"),Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Value Expression")),Object(r.b)("p",{parentName:"li"},"Places a value at a specific point in a string template."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"This is a template {%someVariable} with value expressions {$someFunction()}\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Conditional Expression")),Object(r.b)("p",{parentName:"li"},"Evaluates a condition, then conditionally places one of two template strings using ternary (",Object(r.b)("inlineCode",{parentName:"p"},"?:"),") syntax."),Object(r.b)("p",{parentName:"li"},'A conditional expression is "truthy" when it\'s value is not ',Object(r.b)("inlineCode",{parentName:"p"},"false"),", ",Object(r.b)("inlineCode",{parentName:"p"},"NaN"),", ",Object(r.b)("inlineCode",{parentName:"p"},"undefined"),", ",Object(r.b)("inlineCode",{parentName:"p"},"null"),", or an empty\nstring ",Object(r.b)("inlineCode",{parentName:"p"},"''"),". Because it is a renderable value in a string, the number ",Object(r.b)("inlineCode",{parentName:"p"},"0")," is treated as a truthy value."),Object(r.b)("p",{parentName:"li"},"If the condition is truthy, the expression will resolve to the string after the ",Object(r.b)("inlineCode",{parentName:"p"},"?"),".\nOtherwise, it will resolve to the string after the ",Object(r.b)("inlineCode",{parentName:"p"},":"),". The ",Object(r.b)("inlineCode",{parentName:"p"},":")," is optional and if excluded, an empty\nstring ",Object(r.b)("inlineCode",{parentName:"p"},"''")," will be placed if the condition is falsey."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"{%someVar?truthy string:falsey string} {$someFn(%someVar,foo)?truthy string only}\n")),Object(r.b)("p",{parentName:"li"},"Additional expressions can be nested inside of the truthy/falsey case."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"Welcome, {%firstName?{%firstName}{%lastName? {%lastName}}:Guest}!\n"))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Value expressions and the condition of a conditional expression contain either a ",Object(r.b)("strong",{parentName:"p"},"Variable Reference")," or a ",Object(r.b)("strong",{parentName:"p"},"Function Call"),"."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Variable References")," are indicated by a ",Object(r.b)("inlineCode",{parentName:"p"},"%")," followed by a property name or a chain of ",Object(r.b)("inlineCode",{parentName:"p"},"."),"-separated\nproperty names. They retrieve values from the dictionary of variables passed to the template at the time of\nexecution."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"%variableName\n%some.deepValue\n%some.deeper.value\n%someArray.3.name\n")),Object(r.b)("p",{parentName:"li"},"If a value is not found, a variable reference will resolve to an empty string ",Object(r.b)("inlineCode",{parentName:"p"},"''"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Function Calls")," are indicated by a ",Object(r.b)("inlineCode",{parentName:"p"},"$")," followed by a function name and a pair of parenthesis ",Object(r.b)("inlineCode",{parentName:"p"},"()")," which\nmay optionally contain a list of ",Object(r.b)("inlineCode",{parentName:"p"},","),"-separated arguments."),Object(r.b)("p",{parentName:"li"},"Valid arguments for function calls are variable references, plain strings, and nested function calls. Functions may accept any number of arguments."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"$functionName()\n$functionName(%arg1,plain string)\n$fnOne(%var,$fnTwo(%otherVar,foo))\n"))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"White space is always preserved and is interpretted as being part of a plain string.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Reserved characters (",Object(r.b)("inlineCode",{parentName:"p"},"{}?:)%$"),") can be escaped with a ",Object(r.b)("inlineCode",{parentName:"p"},"\\")," prefix. Reserved characters are context-aware. For\nexample, a ",Object(r.b)("inlineCode",{parentName:"p"},"}")," that is not within an expression does not need to be escaped."))))}c.isMDXComponent=!0}}]);