(self.webpackChunkrunty_website=self.webpackChunkrunty_website||[]).push([[525],{8219:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return r},metadata:function(){return p},toc:function(){return o},default:function(){return l}});var n=a(2122),i=(a(7294),a(3905));const r={title:"Template Syntax"},p={unversionedId:"syntax",id:"syntax",isDocsHomePage:!1,title:"Template Syntax",description:"Syntax",source:"@site/docs/syntax.md",sourceDirName:".",slug:"/syntax",permalink:"/docs/syntax",editUrl:"https://github.com/nderscore/runty/edit/master/website/docs/syntax.md",version:"current",frontMatter:{title:"Template Syntax"},sidebar:"sidebar",previous:{title:"Get Started",permalink:"/docs/"},next:{title:"API Reference",permalink:"/docs/api"}},o=[{value:"Syntax",id:"syntax",children:[]}],s={toc:o};function l({components:e,...t}){return(0,i.kt)("wrapper",(0,n.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Templates")," are a string containing a sequence of plain strings and expressions.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Expressions")," are wrapped by a pair of ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),"'s and come in two types:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Value Expression")),(0,i.kt)("p",{parentName:"li"},"Places a value at a specific point in a string template."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"This is a template {%someVariable} with value expressions {$someFunction()}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Conditional Expression")),(0,i.kt)("p",{parentName:"li"},"Evaluates a condition, then conditionally places one of two template strings using ternary (",(0,i.kt)("inlineCode",{parentName:"p"},"?:"),") syntax."),(0,i.kt)("p",{parentName:"li"},'A conditional expression is "truthy" when it\'s value is not ',(0,i.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", or an empty\nstring ",(0,i.kt)("inlineCode",{parentName:"p"},"''"),". Because it is a renderable value in a string, the number ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," is treated as a truthy value."),(0,i.kt)("p",{parentName:"li"},"If the condition is truthy, the expression will resolve to the string after the ",(0,i.kt)("inlineCode",{parentName:"p"},"?"),".\nOtherwise, it will resolve to the string after the ",(0,i.kt)("inlineCode",{parentName:"p"},":"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},":")," is optional and if excluded, an empty\nstring ",(0,i.kt)("inlineCode",{parentName:"p"},"''")," will be placed if the condition is falsey."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"{%someVar?truthy string:falsey string} {$someFn(%someVar,foo)?truthy string only}\n")),(0,i.kt)("p",{parentName:"li"},"Additional expressions can be nested inside of the truthy/falsey case."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"Welcome, {%firstName?{%firstName}{%lastName? {%lastName}}:Guest}!\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Value expressions and the condition of a conditional expression contain either a ",(0,i.kt)("strong",{parentName:"p"},"Variable Reference")," or a ",(0,i.kt)("strong",{parentName:"p"},"Function Call"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variable References")," are indicated by a ",(0,i.kt)("inlineCode",{parentName:"p"},"%")," followed by a property name or a chain of ",(0,i.kt)("inlineCode",{parentName:"p"},"."),"-separated\nproperty names. They retrieve values from the dictionary of variables passed to the template at the time of\nexecution."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"%variableName\n%some.deepValue\n%some.deeper.value\n%someArray.3.name\n")),(0,i.kt)("p",{parentName:"li"},"If a value is not found, a variable reference will resolve to an empty string ",(0,i.kt)("inlineCode",{parentName:"p"},"''"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Function Calls")," are indicated by a ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," followed by a function name and a pair of parenthesis ",(0,i.kt)("inlineCode",{parentName:"p"},"()")," which\nmay optionally contain a list of ",(0,i.kt)("inlineCode",{parentName:"p"},","),"-separated arguments."),(0,i.kt)("p",{parentName:"li"},"Valid arguments for function calls are variable references, plain strings, and nested function calls. Functions may accept any number of arguments."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"$functionName()\n$functionName(%arg1,plain string)\n$fnOne(%var,$fnTwo(%otherVar,foo))\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"White space is always preserved and is interpretted as being part of a plain string.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Reserved characters (",(0,i.kt)("inlineCode",{parentName:"p"},"{}?:)%$"),") can be escaped with a ",(0,i.kt)("inlineCode",{parentName:"p"},"\\")," prefix. Reserved characters are context-aware. For\nexample, a ",(0,i.kt)("inlineCode",{parentName:"p"},"}")," that is not within an expression does not need to be escaped."))))}l.isMDXComponent=!0}}]);