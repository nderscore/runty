"use strict";(self.webpackChunkrunty_website=self.webpackChunkrunty_website||[]).push([[207],{876:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),k=a,N=c["".concat(o,".").concat(k)]||c[k]||m[k]||l;return n?r.createElement(N,i(i({ref:t},s),{},{components:n})):r.createElement(N,i({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1643:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(7896),a=(n(2784),n(876));const l={title:"API Reference"},i=void 0,p={unversionedId:"api",id:"api",title:"API Reference",description:"Template Parsers",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",editUrl:"https://github.com/nderscore/runty/edit/master/packages/website/docs/api.md",tags:[],version:"current",frontMatter:{title:"API Reference"},sidebar:"sidebar",previous:{title:"Template Syntax",permalink:"/docs/syntax"},next:{title:"Standard Library (fns)",permalink:"/docs/fns"}},o={},u=[{value:"Template Parsers",id:"template-parsers",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"Template Function",id:"template-function",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"RSyntaxError",id:"rsyntaxerror",level:2},{value:"Error Types",id:"error-types",level:3},{value:"Instance Properties",id:"instance-properties",level:3},{value:"Runty Function",id:"runty-function",level:2},{value:"Arguments",id:"arguments-2",level:3},{value:"Returns",id:"returns-2",level:3}],s={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"template-parsers"},"Template Parsers"),(0,a.kt)("p",null,"Runty has two functions for parsing templates and two ways to import/use each of them. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"runty.string()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"runty.array()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array()"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { runty, string, array } from 'runty';\n\n// define a string template:\nconst template = runty.string('template', {/* options */});\n\n// or use the string only export:\nconst template = string('template', {/* options */});\n\n// define a template with array output:\nconst template = runty.array('template', {/* options */});\n\n// or use the array only export:\nconst template = array('template', {/* options */});\n")),(0,a.kt)("h3",{id:"arguments"},"Arguments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"string: template")),(0,a.kt)("p",{parentName:"li"},"  The first and only required argument for both template parsing functions is the template string. It should follow the runty ",(0,a.kt)("a",{parentName:"p",href:"/docs/syntax"},"template string"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options?: RuntyOptions")),(0,a.kt)("p",{parentName:"li"},"  Runty's template parsers accept an optional second argument of options with the following schema:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options.fns?: { [string: name]: RuntyFunction }")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," ",(0,a.kt)("em",{parentName:"p"},"(empty)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Object dictionary which defines functions which will be available to the template")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Functions should follow the specification defined by ",(0,a.kt)("a",{parentName:"p",href:"#runty-function"},"Runty Functions"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/fns"},"Standard Library")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/custom-fns"},"Custom Functions")," documentation for more info.")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options.maxDepth?: number")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"8")),(0,a.kt)("li",{parentName:"ul"},"Sets the maximum depth of nested logic (expressions/function calls) that will be parsed by this instance. Runty will throw an error if this depth is exceeded.")))))),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#template-function"},(0,a.kt)("inlineCode",{parentName:"a"},"Template Function")),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A compiled template function.")))),(0,a.kt)("p",null,"If a template is invalid or contains syntax errors, this function will throw a ",(0,a.kt)("a",{parentName:"p",href:"#rsyntaxerror"},(0,a.kt)("inlineCode",{parentName:"a"},"RSyntaxError"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"template-function"},"Template Function"),(0,a.kt)("p",null,"Generates a string (or array of strings and tokens) from a dictionary of values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = template(variables);\n")),(0,a.kt)("h3",{id:"arguments-1"},"Arguments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"variables: object"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A dictionary of values to pass as variables to the template.")))),(0,a.kt)("h3",{id:"returns-1"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If using ",(0,a.kt)("inlineCode",{parentName:"li"},"runty.string()")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"string()"))))),(0,a.kt)("p",null,"OR"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"(string | unknown)[]"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If using ",(0,a.kt)("inlineCode",{parentName:"li"},"runty.array()")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"array()")),(0,a.kt)("li",{parentName:"ul"},"The values in the array will depend on the values in your variable dictionary and the return type of your functions.")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"rsyntaxerror"},"RSyntaxError"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RSyntaxError")," is the Error class thrown when the template parser encounters invalid syntax."),(0,a.kt)("h3",{id:"error-types"},"Error Types"),(0,a.kt)("p",null,"The following types of errors can be raised, which are exported as an object/enum ",(0,a.kt)("inlineCode",{parentName:"p"},"RSyntaxErrorType")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RSyntaxErrorType.EXPECTED_END")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RSyntaxErrorType.INVALID_EXPRESSION")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RSyntaxErrorType.INVALID_FUNCTION")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RSyntaxErrorType.NESTING_DEPTH")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RSyntaxErrorType.UNTERMINATED_EXPRESSION")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RSyntaxErrorType.UNTERMINATED_FUNCTION"))),(0,a.kt)("h3",{id:"instance-properties"},"Instance Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"message: string")),(0,a.kt)("p",{parentName:"li"},"Long-form syntax error message")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"type: RSyntaxErrorType.(EXPECTED_END|INVALID_EXPRESSION|INVALID_FUNCTION|NESTING_DEPTH|UNTERMINATED_EXPRESSION|UNTERMINATED_FUNCTION)")),(0,a.kt)("p",{parentName:"li"},"The type of syntax error that was encountered.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"rest: string")),(0,a.kt)("p",{parentName:"li"},"The remaining unparsed template string.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"value: string")),(0,a.kt)("p",{parentName:"li"},"Some errors contain another value to provide additional context, such as the function name of an ",(0,a.kt)("inlineCode",{parentName:"p"},"INVALID_FUNCTION")," error"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"runty-function"},"Runty Function"),(0,a.kt)("p",null,"A function passed as a value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"fns")," option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"someFn(args, variables);\n")),(0,a.kt)("h3",{id:"arguments-2"},"Arguments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"args: unkonwn[]")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"An array of arguments passed to the function."),(0,a.kt)("li",{parentName:"ul"},"May be plain strings, token values, or results from other function calls."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"variables: object")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The dictionary of values passed to the template being executed.")))),(0,a.kt)("h3",{id:"returns-2"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"unknown"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The resulting value."),(0,a.kt)("li",{parentName:"ul"},"This may be used as a condition, as an argument to another function, or inserted into a template as a value.")))))}m.isMDXComponent=!0}}]);