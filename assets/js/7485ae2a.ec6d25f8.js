(self.webpackChunkrunty_website=self.webpackChunkrunty_website||[]).push([[852],{3716:function(n,t,e){"use strict";e.r(t),e.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l},default:function(){return u}});var a=e(2122),r=(e(7294),e(3905));const o={title:"Get Started",slug:"/"},i={unversionedId:"get-started",id:"get-started",isDocsHomePage:!1,title:"Get Started",description:"Installation",source:"@site/docs/get-started.md",sourceDirName:".",slug:"/",permalink:"/docs/",editUrl:"https://github.com/nderscore/runty/edit/master/website/docs/get-started.md",version:"current",frontMatter:{title:"Get Started",slug:"/"},sidebar:"sidebar",next:{title:"Template Syntax",permalink:"/docs/syntax"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Quick Examples",id:"quick-examples",children:[{value:"Conditional Interpolations",id:"conditional-interpolations",children:[]},{value:"Using Functions",id:"using-functions",children:[]},{value:"Extending With Custom Functions",id:"extending-with-custom-functions",children:[]},{value:"Getting Template Result As An Array",id:"getting-template-result-as-an-array",children:[]}]}],s={toc:l};function u({components:n,...t}){return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm install runty\n\nor\n\n$ yarn add runty\n")),(0,r.kt)("p",null,"Or import the library directly in your browser or deno:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { runty } from 'https://cdn.skypack.dev/runty';\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"quick-examples"},"Quick Examples"),(0,r.kt)("h3",{id:"conditional-interpolations"},"Conditional Interpolations"),(0,r.kt)("p",null,"This example uses simple conditional variable interpolations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { runty } from 'runty';\n\n// create a parser\nconst runt = runty();\n\n// compile a template\nconst template = runt('Now Playing: {%artist?{%artist} - }{%song}');\n\n// execute a template and pass it a dictionary of variables\nconsole.log(template({ artist: 'Weird Al Yankovic', song: 'Albuquerque' }));\n// \"Now Playing: Weird Al Yankovic - Albuquerque\"\n\nconsole.log(template({ song: 'Albuquerque' }));\n// \"Now Playing: Albuquerque\"\n\n// using an array as a variable dictionary\nconst anotherTemplate = runt('{%1?{%1}:Unknown Artist} - {%0}');\n\nconsole.log(anotherTemplate(['Albuquerque', 'Weird Al Yankovic']));\n// \"Weird Al Yankovic - Albuquerque\"\n\nconsole.log(anotherTemplate(['Albuquerque']));\n// \"Unknown Artist - Albuquerque\"\n")),(0,r.kt)("h3",{id:"using-functions"},"Using Functions"),(0,r.kt)("p",null,"This example uses ",(0,r.kt)("a",{parentName:"p",href:"/docs/fns"},"standard library ",(0,r.kt)("inlineCode",{parentName:"a"},"fns")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { runty, fns } from \'runty\';\n\nconst runt = runty({ fns });\n\nconst template = runt(\'{$gt(%count,0)?There {$eq(%count,1)?is:are} {%count} item{$not($eq(%count,1))?s} in your cart:Your cart is empty}.\');\n\nconsole.log(template({ count: 0 }));\n// "Your cart is empty."\n\nconsole.log(template({ count: 1 }));\n// "There is 1 item in your cart."\n\nconsole.log(template({ count: 2 }));\n// "There are 2 items in your cart."\n')),(0,r.kt)("h3",{id:"extending-with-custom-functions"},"Extending With Custom Functions"),(0,r.kt)("p",null,"This example defines it's own custom functions to make available to templates."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { runty } from 'runty';\n\nconst runt = runty({\n  fns: {\n    plural: ([num]) => Number(num) !== 1,\n    fooOrBar: ([defaultValue], { bar, foo }) => bar ?? foo ?? defaultValue\n  }\n});\n\nconst template = runt('There {$plural(%count)?are:is} {%count} item{$plural(%count)?s} in your cart.');\n\nconsole.log(template({ count: 1 }));\n// \"There is 1 item in your cart.\"\n\nconsole.log(template({ count: 3 }));\n// \"There are 3 items in your cart.\"\n\n\nconst anotherTemplate = runt('This is {$fooOrBar(neither)}.');\n\nconsole.log(anotherTemplate({ foo: 'Foo' }));\n// This is Foo.\n\nconsole.log(anotherTemplate({ bar: 'Bar' }));\n// This is Bar.\n\nconsole.log(anotherTemplate());\n// This is neither.\n")),(0,r.kt)("h3",{id:"getting-template-result-as-an-array"},"Getting Template Result As An Array"),(0,r.kt)("p",null,"In some cases, it may be useful to interpolate non-stringifiable values in a string template. For example, it\nmay be useful to insert a React component into a string template."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { runty } from 'runty';\n\n// trigger an array result while initializing runty:\nconst runt = runty({ asArray: true });\n\nconst template = runt('Drop a react component {%component} into your template.');\n\nconst Component = () => {\n  const values = template({ component: <button key=\"foo\" /> });\n\n  return (\n    <div>\n      {values} // renders: ['Drop a react component ', <button key=\"foo\" />, ' into your template.']\n    </div>\n  );\n};\n\n// or get an array result at time of template compilation:\nrunt('Drop a react component {%component} into your template.', true);\n\n// or at the time of execution:\ntemplate({ component: <button key=\"foo\" /> }, true);\n")))}u.isMDXComponent=!0}}]);